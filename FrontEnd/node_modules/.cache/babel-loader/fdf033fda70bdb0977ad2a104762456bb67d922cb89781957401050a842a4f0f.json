{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vivek.A\\\\Desktop\\\\TransactViz\\\\frontend\\\\src\\\\components\\\\BarChart.jsx\",\n  _s = $RefreshSig$();\n// src/components/BarChart/BarChart.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport '../styles/BarChart.css';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChart = () => {\n  _s();\n  const [month, setMonth] = useState(3); // Default is March\n  const [barChartData, setBarChartData] = useState(null);\n  const priceRanges = ['0-100', '101-200', '201-300', '301-400', '401-500', '501-600', '601-700', '701-800', '801-900', '901-above'];\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  useEffect(() => {\n    const fetchBarChartData = async () => {\n      try {\n        const res = await axios.get(`http://localhost:5000/api/barchart?month=${month}`);\n        const apiData = res.data;\n        const mappedData = priceRanges.map(range => {\n          const foundRange = apiData.find(item => item.priceRange === range);\n          return foundRange ? foundRange.itemCount : 0;\n        });\n        const chartData = {\n          labels: priceRanges,\n          datasets: [{\n            label: 'Items Count',\n            data: mappedData,\n            backgroundColor: 'rgba(75, 192, 192, 0.6)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        };\n        setBarChartData(chartData);\n      } catch (error) {\n        console.error('Error fetching bar chart data:', error);\n      }\n    };\n    fetchBarChartData();\n  }, [month]);\n  const handleMonthChange = e => {\n    setMonth(parseInt(e.target.value));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar-chart\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-title\",\n      children: [\"Bar Chart Stats - \", monthNames[month - 1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: month,\n        onChange: handleMonthChange,\n        children: monthNames.map((m, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index + 1,\n          children: m\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bar-chart-container\",\n      children: barChartData ? /*#__PURE__*/_jsxDEV(Bar, {\n        data: barChartData,\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1 // Ensures whole numbers on y-axis\n              }\n            },\n            x: {\n              reverse: false\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading chart data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(BarChart, \"2GuP6Z6qEI0UuTDy8gNXa15lJMc=\");\n_c = BarChart;\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Bar","jsxDEV","_jsxDEV","BarChart","_s","month","setMonth","barChartData","setBarChartData","priceRanges","monthNames","fetchBarChartData","res","get","apiData","data","mappedData","map","range","foundRange","find","item","priceRange","itemCount","chartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","error","console","handleMonthChange","e","parseInt","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","m","index","options","scales","y","beginAtZero","ticks","stepSize","x","reverse","_c","$RefreshReg$"],"sources":["C:/Users/Vivek.A/Desktop/TransactViz/frontend/src/components/BarChart.jsx"],"sourcesContent":["// src/components/BarChart/BarChart.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../styles/BarChart.css';\r\nimport axios from 'axios';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nconst BarChart = () => {\r\n    const [month, setMonth] = useState(3); // Default is March\r\n    const [barChartData, setBarChartData] = useState(null);\r\n    const priceRanges = [\r\n        '0-100', '101-200', '201-300', '301-400',\r\n        '401-500', '501-600', '601-700', '701-800',\r\n        '801-900', '901-above'\r\n    ];\r\n    const monthNames = [\r\n        \"January\", \"February\", \"March\", \"April\",\r\n        \"May\", \"June\", \"July\", \"August\",\r\n        \"September\", \"October\", \"November\", \"December\"\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const fetchBarChartData = async () => {\r\n            try {\r\n                const res = await axios.get(`http://localhost:5000/api/barchart?month=${month}`);\r\n                const apiData = res.data;\r\n\r\n                const mappedData = priceRanges.map(range => {\r\n                    const foundRange = apiData.find(item => item.priceRange === range);\r\n                    return foundRange ? foundRange.itemCount : 0;\r\n                });\r\n\r\n                const chartData = {\r\n                    labels: priceRanges,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Items Count',\r\n                            data: mappedData,\r\n                            backgroundColor: 'rgba(75, 192, 192, 0.6)',\r\n                            borderColor: 'rgba(75, 192, 192, 1)',\r\n                            borderWidth: 1\r\n                        }\r\n                    ]\r\n                };\r\n\r\n                setBarChartData(chartData);\r\n            } catch (error) {\r\n                console.error('Error fetching bar chart data:', error);\r\n            }\r\n        };\r\n\r\n        fetchBarChartData();\r\n    }, [month]);\r\n\r\n    const handleMonthChange = (e) => {\r\n        setMonth(parseInt(e.target.value));\r\n    };\r\n\r\n    return (\r\n        <div className=\"bar-chart\">\r\n            <div className=\"chart-title\">Bar Chart Stats - {monthNames[month - 1]}</div> \r\n            \r\n            <div className=\"header\">\r\n                <select value={month} onChange={handleMonthChange}>\r\n                    {monthNames.map((m, index) => (\r\n                        <option key={index} value={index + 1}>{m}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n            \r\n            <div className=\"bar-chart-container\">\r\n                {barChartData ? (\r\n                    <Bar \r\n                        data={barChartData}\r\n                        options={{\r\n                            scales: {\r\n                                y: {\r\n                                    beginAtZero: true,\r\n                                    ticks: {\r\n                                        stepSize: 1, // Ensures whole numbers on y-axis\r\n                                    }\r\n                                },\r\n                                x: {\r\n                                    reverse: false,\r\n                                }\r\n                            }\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <p>Loading chart data...</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BarChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}